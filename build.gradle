/*
 * Copyright (c) 2011 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

allprojects {
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
        resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
    }
}

buildscript {
    ext.cubaVersion = '6.1-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Reports Version ${ext.cubaVersion}")
    println("")

    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

apply(plugin: 'maven')
apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.reports'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont. All rights reserved.
Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.'''
    }
}

def globalModule = project(':reports-global')
def coreModule = project(':reports-core')
def guiModule = project(':reports-gui')
def webModule = project(':reports-web')
def desktopModule = project(':reports-desktop')

apply from: "$rootProject.projectDir/lib.gradle"

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'
def postgres = 'org.postgresql:postgresql:9.4-1201-jdbc41'

def groovyArtifact = 'org.codehaus.groovy:groovy-all:2.4.4'
def asm = [group: 'asm', name: 'asm', version: '3.2']

def baseVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')

configure([globalModule, coreModule, guiModule, webModule, desktopModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'checkstyle')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile('org.jmockit:jmockit:1.15')
        testCompile('junit:junit:4.12')
        testCompile('org.hsqldb:hsqldb:2.3.3')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir' : checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }

    jar {
        manifest {
            attributes("Implementation-Version": cubaVersion)
        }
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    dependencies {
		compile(group: 'com.google.code.gson', name: 'gson', version: '2.2.4')
		compile(yargApi) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
    }
}

configure(coreModule) {
    apply plugin: 'groovy'

    sourceSets {
        test {
            groovy {
                srcDir 'test'
            }
        }
    }

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
		compile(yarg) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'commons-dbcp', module: 'commons-dbcp'
        }
		
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core-tests', version: baseVersion)
        testCompile('org.apache.commons:commons-dbcp2:2.1.1')
        provided(servletApi)
        jdbc(postgres)

        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')

        testRuntime postgres
        testRuntime servletApi

        compile groovyArtifact
        compile asm
    }
    
    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }

    assembleDbScripts { moduleAlias = '20-reports' }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }
    
    task createTestDb(dependsOn: assemble, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = 'reports_test'
        dbUser = 'root'
        dbPassword = 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
        provided(servletApi)
    }
}

configure(webModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web',
                'reports-global', 'reports-gui', 'reports-web')
    }
}

configure(desktopModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-desktop', version: baseVersion)
    }
}

task restart(dependsOn: ['stop', ':reports-core:deploy', ':reports-web:deploy'],
        description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}