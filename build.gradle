/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */

buildscript {
    ext.cubaVersion = '6.7-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Reports Version ${ext.cubaVersion}")
    println("")

    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'maven')
apply(plugin: 'idea')
apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/reports/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.reports'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont. All rights reserved.
Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.'''
    }
}

def globalModule = project(':reports-global')
def coreModule = project(':reports-core')
def guiModule = project(':reports-gui')
def webModule = project(':reports-web')
def desktopModule = project(':reports-desktop')

def baseVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')

configure([globalModule, coreModule, guiModule, webModule, desktopModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'findbugs')
    apply(plugin: 'pmd')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile(bom['org.jmockit:jmockit'])
        testCompile(bom['junit:junit'])
        testCompile(bom['org.hsqldb:hsqldb'])
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": cubaVersion)
        }
    }

    javadoc {
        // move to plugin ?
        options.addStringOption("sourcepath", "")
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = false
        omitVisitors = ['FindDoubleCheck']
        excludeFilter = rootProject.file("findbugs/exclude-filter.xml")
        effort = "max"
        reportLevel = "high"
    }

    findbugsMain {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination "${project.buildDir}/reports/findbugs/${project.name}.html"
            }
        }
    }

    findbugsTest {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination "${project.buildDir}/reports/findbugs/test-${project.name}.html"
            }
        }
    }

    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("${project.buildDir}/reports/pmd")
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-design",
                "java-unusedcode"
        ]
    }

    pmdMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        source project.fileTree("src")
    }

    task pmdReport(dependsOn: pmdMain, group: 'verification', description:
            'Generates a HTML report after executing PMD checks.') {
        doLast {
            ant.xslt(
                    in: "${project.buildDir}/reports/pmd/main.xml",
                    style: "${rootDir}/findbugs/pmd-nicerhtml.xsl",
                    out: "${project.buildDir}/reports/pmd/main.html")
        }
    }

    check {
        dependsOn += ['pmdReport']
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    dependencies {
		compile(bom['com.google.code.gson:gson'])
		compile(bom['com.haulmont.yarg:yarg-api']) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cubaVersion)
        }
    }
}

configure(coreModule) {
    apply plugin: 'groovy'

    sourceSets {
        test {
            groovy {
                srcDir 'test'
            }
        }
    }

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
		compile(bom['com.haulmont.yarg:yarg']) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            exclude group: 'commons-dbcp', module: 'commons-dbcp'
        }
		
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core-tests', version: baseVersion)
        testCompile(bom['org.apache.commons:commons-dbcp2'])
        provided(bom['org.apache.tomcat:tomcat-servlet-api'])
        jdbc(bom['org.postgresql:postgresql'])

        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')

        testRuntime(bom['org.postgresql:postgresql'])
        testRuntime(bom['org.apache.tomcat:tomcat-servlet-api'])

        compile(bom['org.codehaus.groovy:groovy-all'])
        compile(bom['asm:asm'])
    }
    
    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }

    assembleDbScripts {
        moduleAlias = '20-reports'
    }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }
    
    task createTestDb(dependsOn: assemble, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = 'reports_test'
        dbUser = 'root'
        dbPassword = 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
        provided(bom['org.apache.tomcat:tomcat-servlet-api'])
    }
}

configure(webModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web',
                'reports-global', 'reports-gui', 'reports-web')
    }
}

configure(desktopModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-desktop', version: baseVersion)
    }
}